{"version":3,"sources":["reducers.js","components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","CounterButton","updateCount","setState","state","count","console","log","color","this","props","onClick","PureComponent","Header","className","Component","Card","id","name","email","alt","src","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","info","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAOMA,EAAqB,CACvBC,YAAa,IAYXC,EAAqB,CACvBC,WAAW,EACXC,OAAQ,GACRC,MAAO,I,oCCMIC,E,kDA1BX,aAAgB,IAAD,8BACX,gBAWJC,YAAc,WACV,EAAKC,UAAS,SAAAC,GACT,MAAO,CAACC,MAAOD,EAAMC,MAAQ,OAZlC,EAAKD,MAAQ,CACTC,MAAO,GAHA,E,qDAoBX,OADAC,QAAQC,IAAI,iBACJ,4BAAQC,MAAOC,KAAKC,MAAMF,MAAQG,QAASF,KAAKP,aAAhD,UACYO,KAAKL,MAAMC,W,GAtBXO,iBCebC,E,uKAPP,OADAP,QAAQC,IAAI,UACJ,6BACI,wBAAIO,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAeN,MAAO,a,GATrBO,aCWNC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,6BAASL,UAAU,uDACf,yBAAKM,IAAK,SAASC,IAAG,+BAA0BJ,EAA1B,cACtB,6BACI,4BAAKC,GACL,2BAAIC,MCiBLG,EAtBE,SAAC,GAAgB,IAAdvB,EAAa,EAAbA,OAIhB,OACI,8BAEQA,EAAOwB,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAK3B,EAAO0B,GAAGR,GACfA,GAAIlB,EAAO0B,GAAGR,GACdC,KAAMnB,EAAO0B,GAAGP,KAChBC,MAAOpB,EAAO0B,GAAGN,aCD9BQ,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,kBAAC,WAAD,KACI,2BACId,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAAAtB,GACX,OACI,yBAAKuB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjE1B,EAAM2B,WCkBJC,E,kDApBX,aAAe,IAAD,8BACV,gBACKlC,MAAQ,CACTmC,UAAU,GAHJ,E,8DAOIvC,EAAOwC,GACrB/B,KAAKN,SAAS,CAAEoC,UAAU,M,+BAI1B,OAAG9B,KAAKL,MAAMmC,SACH,wDAEJ9B,KAAKC,MAAM2B,a,GAhBCtB,aC0BrB0B,G,wLAEEhC,KAAKC,MAAMgC,oB,+BAGL,IAAD,EACsDjC,KAAKC,MAAxDd,EADH,EACGA,YAAa+C,EADhB,EACgBA,eAAgB5C,EADhC,EACgCA,OAAQD,EADxC,EACwCA,UAEvC8C,EAAiB7C,EAAO8C,QAAO,SAAAC,GACjC,OAAOA,EAAM5B,KAAK6B,cAAcC,SAASpD,EAAYmD,kBAGzD,OAAOjD,EACP,wBAAIgB,UAAU,SAAd,WAEI,0BAAMA,UAAU,MACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWc,aAAce,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5C,OAAQ6C,W,GApBxB7B,cA4BHkC,eA5CS,SAAA7C,GACpB,MAAO,CACHR,YAAaQ,EAAM8C,aAAatD,YAChCG,OAAQK,EAAM+C,cAAcpD,OAC5BD,UAAWM,EAAM+C,cAAcrD,UAC/BE,MAAOI,EAAM+C,cAAcnD,UAIN,SAAAoD,GACzB,MAAO,CACHT,eAAgB,SAAAU,GAAK,OAAID,EChBM,CACnCvB,KCR+B,sBDS/ByB,QDcqDD,EAAME,OAAOC,SAC9Dd,gBAAiB,kBAAMU,GCZI,SAAAA,GAC/BA,EAAS,CAAEvB,KCXuB,2BDYlC4B,MAAM,8CACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAI,OAAIT,EAAS,CAAEvB,KCbI,yBDa0ByB,QAASO,OAChEC,OAAO,SAAA9D,GAAK,OAAIoD,EAAS,CAAEvB,KCbC,wBDa4ByB,QAAStD,cDuC3DiD,CAA+CR,GG5C1CsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCNAC,EAASC,yBAETC,EAAcC,YAAgB,CAAErB,aZHV,WAA0C,IAAzC9C,EAAwC,uDAAlCT,EAAoB6E,EAAc,uDAAP,GAC1D,OAAOA,EAAO3C,MACV,IUb2B,sBVcvB,OAAO4C,OAAOC,OAAO,GAAItE,EAAO,CAAER,YAAa4E,EAAOlB,UAC1D,QACI,OAAOlD,IYFiC+C,cZYvB,WAA0C,IAAzC/C,EAAwC,uDAAlCP,EAAoB2E,EAAc,uDAAP,GAC3D,OAAOA,EAAO3C,MACV,IU1B8B,yBV2B1B,OAAO4C,OAAOC,OAAO,GAAItE,EAAO,CAAEN,WAAW,IACjD,IU3B8B,yBV4B1B,OAAO2E,OAAOC,OAAO,GAAItE,EAAO,CAAEL,OAAQyE,EAAOlB,QAASxD,WAAW,IACzE,IU5B6B,wBV6BzB,OAAO2E,OAAOC,OAAO,GAAItE,EAAO,CAAEJ,MAAOwE,EAAOlB,QAASxD,WAAW,IACxE,QACI,OAAOM,MYpBbuE,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEFM,SAASC,eAAe,SD8GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.cebfda0d.chunk.js","sourcesContent":["import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    // shouldComponentUpdate (nextProps, nextState) {\r\n    //     if (this.state.count !== nextState.count) return true\r\n    //     return false;\r\n    // } \r\n    \r\n    updateCount = () => {\r\n        this.setState(state => {\r\n             return {count: state.count + 1} \r\n            });\r\n    }\r\n\r\n    render () {\r\n        console.log(\"CounterButton\");\r\n        return  <button color={this.props.color}  onClick={this.updateCount}>\r\n                    Count: {this.state.count}\r\n                </button>\r\n    }\r\n} \r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate (nextProps, nextState) {\r\n    //     return false;\r\n    // } \r\n\r\n    render () {\r\n        console.log(\"Header\");\r\n        return  <div>\r\n                    <h1 className=\"f1\">RobotFriends</h1>\r\n                    <CounterButton color={'red'} />\r\n                </div>;\r\n    }\r\n} \r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <section className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n            <img alt ='robots' src={`https://robohash.org/${id}?200x200`}></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if(true) {\r\n    //     throw new Error('Nooooo!');\r\n    // }\r\n    return (\r\n        <main>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return ( \r\n                        <Card \r\n                            key={robots[i].id} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </main>   \r\n    );   \r\n};\r\n\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <Fragment>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops. That is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Header from '../components/Header';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error        \r\n    }\r\n}\r\n\r\nconst dispatchStateToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ? \r\n        <h1 className=\"f1 tc\">Loading</h1>:\r\n        (\r\n            <main className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </main>\r\n        )             \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, dispatchStateToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then( response => response.json() )\r\n        .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }) )\r\n        .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }) );\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>    \n    , document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}